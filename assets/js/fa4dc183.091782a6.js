"use strict";(self.webpackChunkcdp_docs=self.webpackChunkcdp_docs||[]).push([[684],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var r=a.createContext({}),d=function(e){var n=a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=d(e.components);return a.createElement(r.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(t),p=i,h=c["".concat(r,".").concat(p)]||c[p]||m[p]||o;return t?a.createElement(h,s(s({ref:n},u),{},{components:t})):a.createElement(h,s({ref:n},u))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,s=new Array(o);s[0]=p;var l={};for(var r in n)hasOwnProperty.call(n,r)&&(l[r]=n[r]);l.originalType=e,l[c]="string"==typeof e?e:i,s[1]=l;for(var d=2;d<o;d++)s[d]=t[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8440:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=t(7462),i=(t(7294),t(3905));const o={sidebar_position:2},s="SQL Style Guide",l={unversionedId:"project_resources/sql_style_guide",id:"project_resources/sql_style_guide",title:"SQL Style Guide",description:"This guide establishes our standards for SQL and are enforced by code review. Some standards are also enforced by SQLFLuff. The purpose of the guide is to help developers write clear and concise SQL that can be worked on and understood by others.",source:"@site/docs/project_resources/sql_style_guide.md",sourceDirName:"project_resources",slug:"/project_resources/sql_style_guide",permalink:"/doc/docs/project_resources/sql_style_guide",draft:!1,editUrl:"https://github.com/cdp-ucsc/doc/blob/main/cdp-docs/docs/project_resources/sql_style_guide.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"documentationSidebar",previous:{title:"Workflow Lifecycle",permalink:"/doc/docs/project_resources/workflow_process"},next:{title:"Kimball Subsystem Inventory",permalink:"/doc/docs/project_resources/kimball_subsystem"}},r={},d=[{value:"This guide establishes our standards for SQL and are enforced by code review. Some standards are also enforced by SQLFLuff. The purpose of the guide is to help developers write clear and concise SQL that can be worked on and understood by others.",id:"this-guide-establishes-our-standards-for-sql-and-are-enforced-by-code-review-some-standards-are-also-enforced-by-sqlfluff-the-purpose-of-the-guide-is-to-help-developers-write-clear-and-concise-sql-that-can-be-worked-on-and-understood-by-others",level:5},{value:"General guidelines",id:"general-guidelines",level:2},{value:"Optimize primarily for readability, maintainability, and robustness rather than for fewer lines of code.",id:"optimize-primarily-for-readability-maintainability-and-robustness-rather-than-for-fewer-lines-of-code",level:4},{value:"Avoid large select statements with multiple tables instead utilize CTEs.",id:"avoid-large-select-statements-with-multiple-tables-instead-utilize-ctes",level:4},{value:"Lines should ideally not be longer than 120 characters.",id:"lines-should-ideally-not-be-longer-than-120-characters",level:4},{value:"Identifiers such as aliases and CTE names should be in lowercase <code>snake_case</code>.",id:"identifiers-such-as-aliases-and-cte-names-should-be-in-lowercase-snake_case",level:4},{value:"Never use reserved words as identifiers.",id:"never-use-reserved-words-as-identifiers",level:4},{value:"Never use tab characters.",id:"never-use-tab-characters",level:4},{value:"Syntax",id:"syntax",level:2},{value:"Keywords and function names should all be lowercase.",id:"keywords-and-function-names-should-all-be-lowercase",level:4},{value:"Use <code>!=</code> instead of <code>&lt;&gt;</code>.",id:"use--instead-of-",level:4},{value:"Always use the <code>as</code> keyword when aliasing columns, expressions, and tables.",id:"always-use-the-as-keyword-when-aliasing-columns-expressions-and-tables",level:4},{value:"Always alias grouping aggregates and other column expressions.",id:"always-alias-grouping-aggregates-and-other-column-expressions",level:4},{value:"Use <code>where</code> instead of <code>having</code> when either would suffice.",id:"use-where-instead-of-having-when-either-would-suffice",level:4},{value:"Use <code>union all</code> instead of <code>union</code> unless duplicate rows really do need to be removed.",id:"use-union-all-instead-of-union-unless-duplicate-rows-really-do-need-to-be-removed",level:4},{value:"Avoid using an <code>order by</code> clause unless it&#39;s necessary to produce the correct result.",id:"avoid-using-an-order-by-clause-unless-its-necessary-to-produce-the-correct-result",level:4},{value:"For functions that take date part parameters, specify the date part as a string rather than a keyword.",id:"for-functions-that-take-date-part-parameters-specify-the-date-part-as-a-string-rather-than-a-keyword",level:4},{value:"Use -- for single line comments (single comment) and /* */ for multiple line comments (block comment).",id:"use----for-single-line-comments-single-comment-and---for-multiple-line-comments-block-comment",level:4},{value:"Use single quotes for strings.",id:"use-single-quotes-for-strings",level:4},{value:"Joins",id:"joins",level:3},{value:"Don&#39;t use <code>using</code> in joins.",id:"dont-use-using-in-joins",level:4},{value:"Be explicit with all join types for example use <code>inner join</code> instead of just <code>join</code>.",id:"be-explicit-with-all-join-types-for-example-use-inner-join-instead-of-just-join",level:4},{value:"In join conditions, put the table that was referenced first immediately after <code>on</code>.",id:"in-join-conditions-put-the-table-that-was-referenced-first-immediately-after-on",level:4},{value:"When joining multiple tables, always prefix the column names with the table name/alias.",id:"when-joining-multiple-tables-always-prefix-the-column-names-with-the-table-namealias",level:4},{value:"When  joining, put filter conditions in the <code>where</code> clause instead of the <code>join</code> clause.",id:"when--joining-put-filter-conditions-in-the-where-clause-instead-of-the-join-clause",level:4},{value:"CTEs",id:"ctes",level:3},{value:"Use CTEs rather than subqueries where possible.",id:"use-ctes-rather-than-subqueries-where-possible",level:4},{value:"Naming",id:"naming",level:2},{value:"The general guide for naming is to be descriptive over minimal.",id:"the-general-guide-for-naming-is-to-be-descriptive-over-minimal",level:4},{value:"Boolean column names:",id:"boolean-column-names",level:4},{value:"Avoid using unnecessary table aliases, especially initialisms.",id:"avoid-using-unnecessary-table-aliases-especially-initialisms",level:4},{value:"Formatting",id:"formatting",level:2},{value:"Left align everything.",id:"left-align-everything",level:4},{value:"Indents should generally be 4 spaces.",id:"indents-should-generally-be-4-spaces",level:4},{value:"Never end a line with an operator like <code>and</code>, <code>or</code>, <code>+</code>, <code>||</code>, etc.",id:"never-end-a-line-with-an-operator-like-and-or---etc",level:4},{value:"Using trailing commas.",id:"using-trailing-commas",level:4},{value:"<code>select</code> clause:",id:"select-clause",level:4},{value:"<code>from</code> clause:",id:"from-clause",level:4},{value:"<code>where</code> clause:",id:"where-clause",level:4},{value:"<code>group by</code> and <code>order by</code> clauses:",id:"group-by-and-order-by-clauses",level:4},{value:"CTEs:",id:"ctes-1",level:4},{value:"<code>case</code> statements:",id:"case-statements",level:4},{value:"Window functions:",id:"window-functions",level:4},{value:"<code>in</code> lists:",id:"in-lists",level:4},{value:"Don&#39;t put extra spaces inside of parentheses.",id:"dont-put-extra-spaces-inside-of-parentheses",level:4},{value:"Credits",id:"credits",level:2}],u={toc:d},c="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"sql-style-guide"},"SQL Style Guide"),(0,i.kt)("h5",{id:"this-guide-establishes-our-standards-for-sql-and-are-enforced-by-code-review-some-standards-are-also-enforced-by-sqlfluff-the-purpose-of-the-guide-is-to-help-developers-write-clear-and-concise-sql-that-can-be-worked-on-and-understood-by-others"},"This guide establishes our standards for SQL and are enforced by code review. Some standards are also enforced by SQLFLuff. The purpose of the guide is to help developers write clear and concise SQL that can be worked on and understood by others."),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"general-guidelines"},"General guidelines"),(0,i.kt)("h4",{id:"optimize-primarily-for-readability-maintainability-and-robustness-rather-than-for-fewer-lines-of-code"},"Optimize primarily for readability, maintainability, and robustness rather than for fewer lines of code."),(0,i.kt)("p",null,"Newlines are cheap; people's time is expensive."),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"avoid-large-select-statements-with-multiple-tables-instead-utilize-ctes"},"Avoid large select statements with multiple tables instead utilize CTEs."),(0,i.kt)("p",null,"If a ",(0,i.kt)("inlineCode",{parentName:"p"},"select")," statement is so large it can't be easily comprehended, it would be better to refactor it into multiple smaller CTEs that are later joined back together."),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"lines-should-ideally-not-be-longer-than-120-characters"},"Lines should ideally not be longer than 120 characters."),(0,i.kt)("p",null,"Very long lines are harder to read, especially in situations where space may be limited like on smaller screens or in side-by-side version control diffs."),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"identifiers-such-as-aliases-and-cte-names-should-be-in-lowercase-snake_case"},"Identifiers such as aliases and CTE names should be in lowercase ",(0,i.kt)("inlineCode",{parentName:"h4"},"snake_case"),"."),(0,i.kt)("p",null,"It's more readable, easier to keep consistent, and avoids having to quote identifiers due to capitalization, spaces, or other special characters."),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"never-use-reserved-words-as-identifiers"},"Never use reserved words as identifiers."),(0,i.kt)("p",null,"Otherwise the identifier will have to be quoted everywhere it's used. ",(0,i.kt)("a",{parentName:"p",href:"https://docs.snowflake.com/en/sql-reference/reserved-keywords"},"(Snowflake's reserved words)")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"never-use-tab-characters"},"Never use tab characters."),(0,i.kt)("p",null,"It's easier to keep things consistent in version control when only space characters are used. By default, VS Code inserts spaces and uses 4 space per ",(0,i.kt)("inlineCode",{parentName:"p"},"Tab")," key. ",(0,i.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/editor/codebasics#_indentation"},"(source)")),(0,i.kt)("hr",null),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"syntax"},"Syntax"),(0,i.kt)("h4",{id:"keywords-and-function-names-should-all-be-lowercase"},"Keywords and function names should all be lowercase."),(0,i.kt)("p",null,"Lowercase is more readable than uppercase, and you won't have to constantly be holding down a shift key."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nselect *\nfrom customers\n\n-- Good\nselect count(*) as customers_count\nfrom customers\n\n-- Bad\nSELECT *\nFROM customers\n\n-- Bad\nSelect *\nFrom customers\n\n-- Bad\nselect COUNT(*) as customers_count\nfrom customers\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"use--instead-of-"},"Use ",(0,i.kt)("inlineCode",{parentName:"h4"},"!=")," instead of ",(0,i.kt)("inlineCode",{parentName:"h4"},"<>"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"!="),' reads like "not equal" which is closer to how we\'d say it out loud.'),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"always-use-the-as-keyword-when-aliasing-columns-expressions-and-tables"},"Always use the ",(0,i.kt)("inlineCode",{parentName:"h4"},"as")," keyword when aliasing columns, expressions, and tables."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nselect count(*) as customers_count\nfrom customers\n\n-- Bad\nselect count(*) customers_count\nfrom customers\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"always-alias-grouping-aggregates-and-other-column-expressions"},"Always alias grouping aggregates and other column expressions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nselect max(id) as max_customer_id\nfrom customers\n\n-- Bad\nselect max(id)\nfrom customers\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"use-where-instead-of-having-when-either-would-suffice"},"Use ",(0,i.kt)("inlineCode",{parentName:"h4"},"where")," instead of ",(0,i.kt)("inlineCode",{parentName:"h4"},"having")," when either would suffice."),(0,i.kt)("p",null,"Queries filter on the ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," clause earlier in their processing, so ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," filters are more performant."),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"use-union-all-instead-of-union-unless-duplicate-rows-really-do-need-to-be-removed"},"Use ",(0,i.kt)("inlineCode",{parentName:"h4"},"union all")," instead of ",(0,i.kt)("inlineCode",{parentName:"h4"},"union")," unless duplicate rows really do need to be removed."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"union all")," is more performant because it doesn't have to sort and de-duplicate the rows."),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"avoid-using-an-order-by-clause-unless-its-necessary-to-produce-the-correct-result"},"Avoid using an ",(0,i.kt)("inlineCode",{parentName:"h4"},"order by")," clause unless it's necessary to produce the correct result."),(0,i.kt)("p",null,"There's no need to incur the performance hit.  If consumers of the query need the results ordered they can normally do that themselves."),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"for-functions-that-take-date-part-parameters-specify-the-date-part-as-a-string-rather-than-a-keyword"},"For functions that take date part parameters, specify the date part as a string rather than a keyword."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"While some advanced SQL editors can helpfully auto-complete and validate date part keywords, if they get it wrong they'll show superfluous errors."),(0,i.kt)("li",{parentName:"ul"},"Less advanced SQL editors won't syntax highlight date part keywords, so using strings helps them stand out."),(0,i.kt)("li",{parentName:"ul"},"Using a string makes it unambiguous that it's not a column reference.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\ndate_trunc('month', created_at)\n\n-- Bad\ndate_trunc(month, created_at)\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"use----for-single-line-comments-single-comment-and---for-multiple-line-comments-block-comment"},"Use -- for single line comments (single comment) and /* */ for multiple line comments (block comment)."),(0,i.kt)("p",null,"By default, VS Code includes keyboard shortcuts to toggle single and block comments. ",(0,i.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf"},"(Windows source)")," ",(0,i.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf"},"(Mac source)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Single Comment:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Windows ",(0,i.kt)("inlineCode",{parentName:"li"},"Ctrl+/")),(0,i.kt)("li",{parentName:"ul"},"Mac ",(0,i.kt)("inlineCode",{parentName:"li"},"\u2318/ ")))),(0,i.kt)("li",{parentName:"ul"},"Block Comment:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Windows ",(0,i.kt)("inlineCode",{parentName:"li"},"Shift+Alt+A")),(0,i.kt)("li",{parentName:"ul"},"Mac ",(0,i.kt)("inlineCode",{parentName:"li"},"\u21e7\u2325A"))))),(0,i.kt)("p",null,"When expanding a comment into multiple lines:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Keep the opening ",(0,i.kt)("inlineCode",{parentName:"li"},"/*")," on the same line as the first comment text and the closing ",(0,i.kt)("inlineCode",{parentName:"li"},"*/")," on the same line as the last comment text."),(0,i.kt)("li",{parentName:"ul"},"Indent subsequent lines by 4 spaces, and add an extra space before the first comment text to align it with the text on subsequent lines.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"Single\n-- Good\n\n/* Bad */\n\nBlock\n/*  Good:  Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n    sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n    Dolor sed viverra ipsum nunc aliquet bibendum enim. */\n\n/* Bad:  Lorem ipsum dolor sit amet, consectetur adipiscing elit,\nsed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\nDolor sed viverra ipsum nunc aliquet bibendum enim. */\n\n-- Bad:  Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n-- sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n-- Dolor sed viverra ipsum nunc aliquet bibendum enim.\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"use-single-quotes-for-strings"},"Use single quotes for strings."),(0,i.kt)("p",null,"Some SQL dialects like BigQuery support using double quotes or even triple quotes for strings, but for most dialects:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Double quoted strings represent identifiers."),(0,i.kt)("li",{parentName:"ul"},"Triple quoted strings will be interpreted like the value itself contains leading and trailing single quotes.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nselect *\nfrom customers\nwhere email like '%@domain.com'\n\n-- Bad\nselect *\nfrom customers\nwhere email like \"%@domain.com\"\n-- Will probably result in an error like `column \"%@domain.com\" does not exist`.\n\n-- Bad\nselect *\nfrom customers\nwhere email like '''%@domain.com'''\n-- Will probably be interpreted like '\\'%domain.com\\''.\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"joins"},"Joins"),(0,i.kt)("h4",{id:"dont-use-using-in-joins"},"Don't use ",(0,i.kt)("inlineCode",{parentName:"h4"},"using")," in joins."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Having all joins use ",(0,i.kt)("inlineCode",{parentName:"li"},"on")," is more consistent."),(0,i.kt)("li",{parentName:"ul"},"If additional join conditions need to be added later, ",(0,i.kt)("inlineCode",{parentName:"li"},"on")," is easier to adapt."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"using")," can produce inconsistent results with outer joins in some databases.")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"be-explicit-with-all-join-types-for-example-use-inner-join-instead-of-just-join"},"Be explicit with all join types for example use ",(0,i.kt)("inlineCode",{parentName:"h4"},"inner join")," instead of just ",(0,i.kt)("inlineCode",{parentName:"h4"},"join"),"."),(0,i.kt)("p",null,"It's better to be explicit so that the join type is crystal clear."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nselect *\nfrom customers\ninner join orders on customers.id = orders.customer_id\n\n-- Bad\nselect *\nfrom customers\njoin orders on customers.id = orders.customer_id\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"in-join-conditions-put-the-table-that-was-referenced-first-immediately-after-on"},"In join conditions, put the table that was referenced first immediately after ",(0,i.kt)("inlineCode",{parentName:"h4"},"on"),"."),(0,i.kt)("p",null,"This makes it easier to determine if the join is going to cause the results to fan out."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nselect *\nfrom customers\nleft join orders on customers.id = orders.customer_id\n-- primary key = foreign key --\x3e one-to-many --\x3e fan out\n\n-- Good\nselect *\nfrom orders\nleft join customers on orders.customer_id = customers.id\n-- foreign key = primary key --\x3e many-to-one --\x3e no fan out\n\n-- Bad\nselect *\nfrom customers\nleft join orders on orders.customer_id = customers.id\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"when-joining-multiple-tables-always-prefix-the-column-names-with-the-table-namealias"},"When joining multiple tables, always prefix the column names with the table name/alias."),(0,i.kt)("p",null,"You should be able to tell at a glance where a column is coming from."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nselect\n    customers.email\n    , orders.invoice_number\n    , orders.total_amount\nfrom customers\ninner join orders on customers.id = orders.customer_id\n\n-- Bad\nselect\n    email\n    , invoice_number\n    , total_amount\nfrom customers\ninner join orders on customers.id = orders.customer_id\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"when--joining-put-filter-conditions-in-the-where-clause-instead-of-the-join-clause"},"When  joining, put filter conditions in the ",(0,i.kt)("inlineCode",{parentName:"h4"},"where")," clause instead of the ",(0,i.kt)("inlineCode",{parentName:"h4"},"join")," clause."),(0,i.kt)("p",null,"Only join conditions should be put in a ",(0,i.kt)("inlineCode",{parentName:"p"},"join")," clause. All filter conditions should be put together in the ",(0,i.kt)("inlineCode",{parentName:"p"},"where")," clause."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nselect\n    ...\nfrom orders\ninner join customers on orders.customer_id = customers.id\nwhere\n    orders.total_amount >= 100\n    and customers.email like '%@domain.com'\n\n-- Bad\nselect\n    ...\nfrom orders\ninner join customers on\n    orders.customer_id = customers.id\n    and customers.email like '%@domain.com'\nwhere orders.total_amount >= 100\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"ctes"},"CTEs"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Where performance permits, CTEs should perform a single, logical unit of work."),(0,i.kt)("li",{parentName:"ul"},"CTE names should be as verbose as needed to convey what they do."),(0,i.kt)("li",{parentName:"ul"},"CTE names should not be prefixed or suffixed with ",(0,i.kt)("inlineCode",{parentName:"li"},"cte"),"."),(0,i.kt)("li",{parentName:"ul"},"CTEs with confusing or notable logic should be commented.")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"use-ctes-rather-than-subqueries-where-possible"},"Use CTEs rather than subqueries where possible."),(0,i.kt)("p",null,"CTEs will make your queries more straightforward to read/reason about, can be referenced multiple times, and are easier to adapt/refactor later. If you think a subquery is unavoidable, it is a good time to ask for a second pair of eyes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nwith\n    paying_customers as (\n        select *\n        from customers\n        where plan_name != 'free'\n    )\n\nselect ...\nfrom paying_customers\n\n-- Bad\nselect ...\nfrom (\n    select *\n    from customers\n    where plan_name != 'free'\n) as paying_customers\n")),(0,i.kt)("hr",null),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"naming"},"Naming"),(0,i.kt)("h4",{id:"the-general-guide-for-naming-is-to-be-descriptive-over-minimal"},"The general guide for naming is to be descriptive over minimal."),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"boolean-column-names"},"Boolean column names:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Boolean columns should be prefixed with a present or past tense third-person singular verb, such as:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"is_")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"was_"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"has_")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"had_"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"does_")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"did_"))),(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"It is also preferred that boolean column values take ",(0,i.kt)("inlineCode",{parentName:"p"},"true/false")," over ",(0,i.kt)("inlineCode",{parentName:"p"},"yes/no")," values.")))),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"avoid-using-unnecessary-table-aliases-especially-initialisms"},"Avoid using unnecessary table aliases, especially initialisms."),(0,i.kt)("p",null,"Suggested guidelines:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If the table name consists of 3 words or less don't alias it."),(0,i.kt)("li",{parentName:"ul"},"Use a subset of the words as the alias if it makes sense (e.g. if ",(0,i.kt)("inlineCode",{parentName:"li"},"partner_shipments_order_line_items")," is the only line items table being referenced it could be reasonable to alias it as just ",(0,i.kt)("inlineCode",{parentName:"li"},"line_items"),").")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nselect\n    customers.email,\n    orders.invoice_number\nfrom customers\ninner join orders on customers.id = orders.customer_id\n\n-- Bad\nselect\n    c.email,\n    o.invoice_number\nfrom customers as c\ninner join orders as o on c.id = o.customer_id\n")),(0,i.kt)("hr",null),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"formatting"},"Formatting"),(0,i.kt)("p",null,"The general guide for formatting is:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If there's only one thing, put it on the same line as the opening keyword."),(0,i.kt)("li",{parentName:"ul"},"If there are multiple things, put each one on its own line (including the first one), indented one level more than the opening keyword.")),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"left-align-everything"},"Left align everything."),(0,i.kt)("p",null,"This is easier to keep consistent, and is also easier to write."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nselect email\nfrom customers\nwhere email like '%@domain.com'\n\n-- Bad\nselect email\n  from customers\n where email like '%@domain.com'\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"indents-should-generally-be-4-spaces"},"Indents should generally be 4 spaces."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nselect\n    id,\n    email\nfrom customers\nwhere\n    email like '%@domain.com'\n    and plan_name != 'free'\n\n-- Bad\nselect\n  id,\n  email\nfrom customers\nwhere email like '%@domain.com'\n  and plan_name != 'free'\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"never-end-a-line-with-an-operator-like-and-or---etc"},"Never end a line with an operator like ",(0,i.kt)("inlineCode",{parentName:"h4"},"and"),", ",(0,i.kt)("inlineCode",{parentName:"h4"},"or"),", ",(0,i.kt)("inlineCode",{parentName:"h4"},"+"),", ",(0,i.kt)("inlineCode",{parentName:"h4"},"||"),", etc."),(0,i.kt)("p",null,"If code containing such operators needs to be split across multiple lines, put the operators at the beginning of the subsequent lines."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You should be able to scan the left side of the query text to see the logic being used without having to read to the end of every line."),(0,i.kt)("li",{parentName:"ul"},"The operator is only there for/because of what follows it.  If nothing followed the operator it wouldn't be needed, so putting the operator on the same line as what follows it makes it clearer why it's there.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nselect *\nfrom customers\nwhere\n    email like '%@domain.com'\n    and plan_name != 'free'\n\n-- Bad\nselect *\nfrom customers\nwhere\n    email like '%@domain.com' and\n    plan_name != 'free'\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"using-trailing-commas"},"Using trailing commas."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nwith\n    customers as (\n        ...\n    ),\n    paying_customers as (\n        ...\n    )\nselect\n    id,\n    email,\n    date_trunc('month', created_at) as signup_month\nfrom paying_customers\nwhere email in (\n        'user-1@example.com',\n        'user-2@example.com',\n        'user-3@example.com'\n    )\n\n-- Bad\nwith\n    customers as (\n        ...\n    )\n    , paying_customers as (\n        ...\n    )\nselect\n    id\n    , email\n    , date_trunc('month', created_at) as signup_month\nfrom paying_customers\nwhere email in (\n        'user-1@example.com'\n        , 'user-2@example.com'\n        , 'user-3@example.com'\n    )\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"select-clause"},(0,i.kt)("inlineCode",{parentName:"h4"},"select")," clause:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If there is only one column expression, put it on the same line as ",(0,i.kt)("inlineCode",{parentName:"li"},"select"),"."),(0,i.kt)("li",{parentName:"ul"},"If there are multiple column expressions, put each one on its own line (including the first one), indented one level more than ",(0,i.kt)("inlineCode",{parentName:"li"},"select"),"."),(0,i.kt)("li",{parentName:"ul"},"If there is a ",(0,i.kt)("inlineCode",{parentName:"li"},"distinct")," qualifier, put it on the same line as ",(0,i.kt)("inlineCode",{parentName:"li"},"select"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nselect id\n\n\n-- Good\nselect\n    id,\n    email\n\n-- Bad\nselect id, email\n\n-- Bad\nselect id,\n    email\n\n\n-- Good\nselect distinct country\n\n-- Good\nselect distinct\n    state,\n    country\n\n-- Bad\nselect distinct state, country\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"from-clause"},(0,i.kt)("inlineCode",{parentName:"h4"},"from")," clause:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Put the initial table being selected from on the same line as ",(0,i.kt)("inlineCode",{parentName:"li"},"from"),"."),(0,i.kt)("li",{parentName:"ul"},"If there are other tables being joined:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Put each ",(0,i.kt)("inlineCode",{parentName:"li"},"join")," on its own line, at the same indentation level as ",(0,i.kt)("inlineCode",{parentName:"li"},"from"),"."),(0,i.kt)("li",{parentName:"ul"},"If there is only one join condition, put it on the same line as the ",(0,i.kt)("inlineCode",{parentName:"li"},"join"),"."),(0,i.kt)("li",{parentName:"ul"},"If there are multiple join conditions, put each condition on its own line (including the first one), indented one level more than the ",(0,i.kt)("inlineCode",{parentName:"li"},"join"),".")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nfrom customers\n\n\n-- Good\nfrom customers\nleft join orders on customers.id = orders.customer_id\n\n-- Bad\nfrom customers\n    left join orders on customers.id = orders.customer_id\n\n-- Bad\nfrom customers\nleft join orders\n    on customers.id = orders.customer_id\n\n\n-- Good\nfrom customers\nleft join orders on\n    customers.id = orders.customer_id\n    and customers.region_id = orders.region_id\n\n-- Bad\nfrom customers\nleft join orders on customers.id = orders.customer_id\n    and customers.region_id = orders.region_id\n\n-- Bad\nfrom customers\nleft join orders\n    on customers.id = orders.customer_id\n    and customers.region_id = orders.region_id\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"where-clause"},(0,i.kt)("inlineCode",{parentName:"h4"},"where")," clause:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If there is only one condition, put it on the same line as ",(0,i.kt)("inlineCode",{parentName:"li"},"where"),"."),(0,i.kt)("li",{parentName:"ul"},"If there are multiple conditions, put each one on its own line (including the first one), indented one level more than ",(0,i.kt)("inlineCode",{parentName:"li"},"where"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nwhere email like '%@domain.com'\n\n\n-- Good\nwhere\n    email like '%@domain.com'\n    and plan_name != 'free'\n\n-- Bad\nwhere email like '%@domain.com' and plan_name != 'free'\n\n-- Bad\nwhere email like '%@domain.com'\n    and plan_name != 'free'\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"group-by-and-order-by-clauses"},(0,i.kt)("inlineCode",{parentName:"h4"},"group by")," and ",(0,i.kt)("inlineCode",{parentName:"h4"},"order by")," clauses:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If grouping/ordering by column numbers, put all numbers on the same line as ",(0,i.kt)("inlineCode",{parentName:"li"},"group by"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"order by"),"."),(0,i.kt)("li",{parentName:"ul"},"If grouping/ordering by column names/aliases:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"- If there is only one column, put it on the same line as `group by`/`order by`.\n- If there are multiple columns, put each on its own line (including the first one), indented one level more than `group by`/`order by`.\n")),(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},"Grouping by column numbers is preferred over grouping by column names/aliases.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\ngroup by 1, 2, 3\n\n-- Bad\ngroup by\n    1\n    , 2\n    , 3\n\n\n-- Good\norder by plan_name\n\n\n-- Good\norder by\n    plan_name\n    , signup_month\n\n-- Bad\norder by plan_name, signup_month\n\n-- Bad\norder by plan_name\n    , signup_month\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"ctes-1"},"CTEs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Start each CTE on its own line, indented one level more than ",(0,i.kt)("inlineCode",{parentName:"li"},"with")," (including the first one, and even if there is only one)."),(0,i.kt)("li",{parentName:"ul"},"Use a single blank line around CTEs to add visual separation."),(0,i.kt)("li",{parentName:"ul"},"Put any comments about the CTE within the CTE's parentheses, at the same indentation level as the ",(0,i.kt)("inlineCode",{parentName:"li"},"select"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nwith\n    paying_customers as (\n        select ...\n        from customers\n    )\n\nselect ...\nfrom paying_customers\n\n-- Bad\nwith paying_customers as (\n\n    select ...\n    from customers\n\n)\nselect ...\nfrom paying_customers\n\n\n-- Good\nwith\n    paying_customers as (\n        select ...\n        from customers\n    )\n\n    , paying_customers_per_month as (\n        -- CTE comments...\n        select ...\n        from paying_customers\n    )\n\nselect ...\nfrom paying_customers_per_month\n\n-- Bad\nwith paying_customers as (\n\n        select ...\n        from customers\n\n    )\n\n    -- CTE comments...\n    , paying_customers_per_month as (\n\n        select ...\n        from paying_customers\n\n      )\n\nselect ...\nfrom paying_customers_per_month\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"case-statements"},(0,i.kt)("inlineCode",{parentName:"h4"},"case")," statements:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can put a ",(0,i.kt)("inlineCode",{parentName:"li"},"case")," statement all on one line if it only has a single ",(0,i.kt)("inlineCode",{parentName:"li"},"when")," clause and doesn't cause the line's length to be too long."),(0,i.kt)("li",{parentName:"ul"},"For multi-line ",(0,i.kt)("inlineCode",{parentName:"li"},"case")," statements:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"case")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"end as")," should align"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"when(s)")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"else")," should align and be indented one more level than ",(0,i.kt)("inlineCode",{parentName:"li"},"case")," (when there are multiple ",(0,i.kt)("inlineCode",{parentName:"li"},"whens")," for a ",(0,i.kt)("inlineCode",{parentName:"li"},"case"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"and(s)")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"then(s)")," should align and be indented one more level than ",(0,i.kt)("inlineCode",{parentName:"li"},"when")," (when there are multiple conditions for one ",(0,i.kt)("inlineCode",{parentName:"li"},"when"),")")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nselect\n    case when customers.status_code = 1 then 'Active' else 'Inactive' end as customer_status\n\n-- Bad\nselect\n    case when customers.status_code = 1 and customers.deleted_at is null then 'Active' else 'Inactive' end as customer_status\n\n\n-- Good\nselect\n    ... ,\n    case\n        when customers.status_code = 1\n            and customers.deleted_at is null\n            and ...\n            then 'Active'\n        when customer.status_code = 2 \n            and customers.deleted_at is null\n            and ...\n            then 'Break'\n        else 'Inactive'\n      end as customer_status\n\n-- Bad\nselect\n    ... ,\n    case\n        when customers.status_code = 1 and customers.deleted_at is null\n        then 'Active'\n        when customers.status_code = 2 and customers.deleted_at is null\n        then 'Break'\n        else 'Inactive'\n    end as customer_status\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"window-functions"},"Window functions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You can put a window function all on one line if it doesn't cause the line's length to be too long."),(0,i.kt)("li",{parentName:"ul"},"If breaking a window function into multiple lines:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Put each sub-clause within ",(0,i.kt)("inlineCode",{parentName:"li"},"over ()")," on its own line, indented one level more than the window function:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"partition by")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"order by")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rows between")," / ",(0,i.kt)("inlineCode",{parentName:"li"},"range between")))),(0,i.kt)("li",{parentName:"ul"},"Put the closing ",(0,i.kt)("inlineCode",{parentName:"li"},"over ()")," parenthesis on its own line at the same indentation level as the window function.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nselect\n    customer_id,\n    invoice_number,\n    row_number() over (partition by customer_id order by created_at) as order_rank\nfrom orders\n\n-- Good\nselect\n    customer_id,\n    invoice_number,\n    row_number() over (\n        partition by customer_id\n        order by created_at\n      ) as order_rank\nfrom orders\n\n-- Bad\nselect\n    customer_id,\n    invoice_number,\n    row_number() over (partition by customer_id\n                         order by created_at) as order_rank\nfrom orders\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"in-lists"},(0,i.kt)("inlineCode",{parentName:"h4"},"in")," lists:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Break long lists of ",(0,i.kt)("inlineCode",{parentName:"li"},"in")," values into multiple indented lines with one value per line.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Good\nwhere email in (\n        'user-1@example.com',\n        'user-2@example.com',\n        'user-3@example.com'\n    )\n\n-- Bad\nwhere email in ('user-1@example.com', 'user-2@example.com', 'user-3@example.com')\n")),(0,i.kt)("br",null),(0,i.kt)("h4",{id:"dont-put-extra-spaces-inside-of-parentheses"},"Don't put extra spaces inside of parentheses."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Bad\nselect *\nfrom customers\nwhere plan_name in ( 'monthly', 'yearly' )\n\n-- Good\nselect *\nfrom customers\nwhere plan_name in ('monthly', 'yearly')\n")),(0,i.kt)("hr",null),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"credits"},"Credits"),(0,i.kt)("p",null,"This style guide was inspired in part by:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/fishtown-analytics/corp/blob/b5c6f55b9e7594e1a1e562edf2378b6dd78a1119/dbt_coding_conventions.md"},"Fishtown Analytics' dbt coding conventions")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/mattm/sql-style-guide/blob/3eaef3519ca5cc7f21feac6581b257638f9b1564/README.md"},"Matt Mazur's SQL style guide")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://about.gitlab.com/handbook/business-ops/data-team/sql-style-guide/"},"GitLab's SQL style guide"))))}m.isMDXComponent=!0}}]);